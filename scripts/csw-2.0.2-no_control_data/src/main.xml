<?xml version="1.0" encoding="UTF-8"?>
<ctl:package xmlns="http://www.occamlab.com/ctl" 
 xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
 xmlns:ctl="http://www.occamlab.com/ctl"
 xmlns:parsers="http://www.occamlab.com/te/parsers"
 xmlns:p="http://teamengine.sourceforge.net/parsers"
 xmlns:saxon="http://saxon.sf.net/"
 xmlns:csw="http://www.opengis.net/cat/csw/2.0.2"
 xmlns:ows="http://www.opengis.net/ows"
 xmlns:dc="http://purl.org/dc/elements/1.1/" 
 xmlns:dct="http://purl.org/dc/terms/" 
 xmlns:xlink="http://www.w3.org/1999/xlink" 
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xsd="http://www.w3.org/2001/XMLSchema"
 xmlns:ogc="http://www.opengis.net/ogc"  
 xmlns:gml="http://www.opengis.net/gml">

   <xi:include href="common.xml"/>
   <xi:include href="capability-tests.xml"/>
   
   <ctl:suite name="csw:csw-2.0.2-compliance-suite">
       <ctl:title>CSW 2.0.2 Compliance Test Suite</ctl:title>
       <ctl:description>
       Verifies a CSW 2.0.2 catalogue implementation against all applicable 
       abstract test suites. No specific CSW application profile is presumed.
       These tests are intended to be incorporated into profile-specific test 
       suites.
       </ctl:description>
       <ctl:link>data/data-csw-2.0.2.zip</ctl:link>
       <ctl:link>docs/csw/2.0.2/</ctl:link>
      <ctl:starting-test>csw:Main</ctl:starting-test>
   </ctl:suite>
   
   <ctl:test name="csw:Main">
      <ctl:assertion>The implementation under test minimally conforms to the CSW 
      part (Clause 10) of Catalogue 2.0.2 (OGC 07-006r1).</ctl:assertion>
      <ctl:code>         
         <xsl:variable name="form-values">
            <ctl:form height="600" width="800">
               <body>
                  <h2>CSW Catalogue 2.0.2 - Test setup</h2>
                  <h3>Service metadata</h3>
                  <p>
                  Please provide a URL from which a capabilities document for 
                  the CSW implementation under test can be retrieved (this can 
                  refer to a static document or to a service endpoint).
                  </p>
                  <br/>
                  <table border="2" padding="4" bgcolor="#00ffff">
                    <tr>
                      <td align="left">Capabilities URL</td>
                      <td align="center">
                          <input name="capabilities.url" size="128" 
                                 type="text" value="http://"/>
                      </td>
                    </tr>
                  </table>
                  <p>
                  <div bgcolor="#ffffcc"><strong> WARNING </strong> Don't forget to add the test data!</div>
                  </p>
                  <br />
                  <input type="submit" value="Start"/>
               </body>
            </ctl:form>
         </xsl:variable>

		<!-- Populate global variables from form data -->
		<xsl:variable name="csw.capabilities.url" 
                      select="$form-values/values/value[@key='capabilities.url']"/>

		<!-- Attempt to retrieve capabilities document -->
		<xsl:variable name="csw.capabilities.doc">
			<ctl:request>
				<ctl:url>
					<xsl:value-of select="$csw.capabilities.url"/>
				</ctl:url>
				<ctl:method>GET</ctl:method>
			</ctl:request>
		</xsl:variable>
        
        <xsl:choose>
          <xsl:when test="not($csw.capabilities.doc/csw:Capabilities)">
		    <ctl:message>[FAILURE] Did not obtain a csw:Capabilities document! Skipping remaining tests.</ctl:message>	
			<ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="SmokeTest.result">
              <ctl:call-test name="csw:SmokeTest">
                <ctl:with-param name="csw.capabilities.doc" select="$csw.capabilities.doc"/>
              </ctl:call-test>
            </xsl:variable>
            <xsl:if test="not($SmokeTest.result/*)">
				<xsl:variable name="ElementsTest.result">
				  <ctl:call-test name="csw:ElementsTest">
					<ctl:with-param name="csw.capabilities.doc" select="$csw.capabilities.doc"/>
				  </ctl:call-test>
				</xsl:variable>
				<xsl:if test="not($ElementsTest.result/*)">
				   <ctl:call-test name="csw:capability-tests">
					 <ctl:with-param name="csw.capabilities.doc" 
									 select="$csw.capabilities.doc"/>															
				   </ctl:call-test>
			   </xsl:if>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
   </ctl:test>
   
   <ctl:test name="csw:SmokeTest">
		<ctl:param name="csw.capabilities.doc"/>
		<ctl:assertion>Confirm that the IUT is ready to undergo testing.</ctl:assertion>
        <ctl:comment>
        Check all of the following conditions:
        (1) the service is available;
        (2) the capabilities document is valid;
        (3) test data have been loaded.
        If any of these checks fail, the test run is aborted.
        </ctl:comment>
		<ctl:code>
            <ctl:call-test name="ctl:SchematronValidatingParser">
		        <ctl:with-param name="doc" select="$csw.capabilities.doc" />
		        <ctl:with-param name="schema">sch/csw/2.0.2/Capabilities.sch</ctl:with-param>
		        <ctl:with-param name="phase">RequiredElementsPhase</ctl:with-param>
	        </ctl:call-test>

            <xsl:variable name="GetCapabilities.get.endpoint">
		        <xsl:value-of select="$csw.capabilities.doc//ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>
		    </xsl:variable>
            <xsl:variable name="GetRecordById.get.endpoint">
			    <xsl:value-of select="$csw.capabilities.doc//ows:OperationsMetadata/ows:Operation[@name='GetRecordById']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>
		    </xsl:variable>
			<xsl:variable name="csw.GetRecords.post.url">
				<xsl:value-of select="$csw.capabilities.doc//ows:OperationsMetadata/ows:Operation[@name='GetRecords']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
			</xsl:variable>
            <xsl:choose>
              <xsl:when test="not(starts-with($GetCapabilities.get.endpoint,'http'))">
                  <ctl:message>
                  [FAILURE] Required endpoint for GetCapabilities using GET method not found in capabilities document.
                  </ctl:message>
                  <ctl:fail />
              </xsl:when>
              <xsl:when test="not(starts-with($GetRecordById.get.endpoint,'http'))">
                  <ctl:message>
                  [FAILURE] Required endpoint for GetRecordById using GET method not found in capabilities document.
                  </ctl:message>
                  <ctl:fail />
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="GetCapabilitiesRsp"> 
				  <ctl:request>
					<ctl:url>
						<xsl:value-of select="$GetCapabilities.get.endpoint"/>
					</ctl:url>
					<ctl:method>GET</ctl:method>
					<ctl:param name="service">CSW</ctl:param>
					<ctl:param name="version">2.0.2</ctl:param>
					<ctl:param name="request">GetCapabilities</ctl:param>
					<p:XMLValidatingParser.CSW/>
				  </ctl:request>
			    </xsl:variable>
				
				<xsl:variable name="GetFirstRecord">
					<request>
						<ctl:url>
							<xsl:value-of select="$csw.GetRecords.post.url"/>
						</ctl:url>
						<ctl:method>POST</ctl:method>
						<ctl:body>
						<csw:GetRecords service="CSW" version="2.0.2" resultType="results" maxRecords="1">
							  <csw:Query typeNames="csw:Record">
								<csw:ElementName>dc:identifier</csw:ElementName>
							  </csw:Query>
							</csw:GetRecords>
						</ctl:body>
						<p:XMLValidatingParser.CSW/>
					</request>
				</xsl:variable>
				<xsl:variable name="id.1">
				  <xsl:value-of select="$GetFirstRecord//csw:SearchResults/*[1]/dc:identifier"/>
				</xsl:variable>
				<ctl:message>Selected ID: <xsl:value-of select="$id.1"/></ctl:message>
                <xsl:variable name="GetRecordByIdRsp">
                  <ctl:request>
                    <ctl:url>
						<xsl:value-of select="$GetRecordById.get.endpoint"/>
					</ctl:url>
					<ctl:method>GET</ctl:method>
					<ctl:param name="service">CSW</ctl:param>
					<ctl:param name="version">2.0.2</ctl:param>
					<ctl:param name="request">GetRecordById</ctl:param>
                    <ctl:param name="id"><xsl:value-of select="$id.1"/></ctl:param>
					<p:XMLValidatingParser.CSW/>
				  </ctl:request>
			    </xsl:variable>
              
                <xsl:if test="not($GetCapabilitiesRsp/csw:Capabilities)">
                  <ctl:message>
                  [FAILURE] The response entity is NOT a csw:Capabilities document.
                  The document element has [local name] = <xsl:value-of select="local-name($GetCapabilitiesRsp/*[1])"/> and [namespace name] = <xsl:value-of select="namespace-uri($GetCapabilitiesRsp/*[1])"/>.
                  </ctl:message>
                  <ctl:fail/>
                </xsl:if>
                
                <xsl:if test="count($GetRecordByIdRsp/csw:GetRecordByIdResponse/*) != 1">
                  <ctl:message>
                  [FAILURE] The GetRecordByIdResponse entity does NOT include only one matching item from the test data set (id = <xsl:value-of select="$id.1"/>).
                  </ctl:message>
                  <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</ctl:code>
	</ctl:test>
	
	   <ctl:test name="csw:ElementsTest">
		<ctl:param name="csw.capabilities.doc"/>
		<ctl:assertion>Confirm that Elements in the DB match the asumotion</ctl:assertion>
        <ctl:comment>
        Check all of the following conditions:
        (1) More than 10 elements in DB
        (2) At Least 2 records with a bounding box
        (3) At Least 2 records with title and subject
		(4) At Least 2 records with date
        If any of these checks fail, the test run is aborted.
        </ctl:comment>
		<ctl:code>
			<xsl:variable name="csw.GetRecords.post.url">
				<xsl:value-of select="$csw.capabilities.doc//ows:OperationsMetadata/ows:Operation[@name='GetRecords']/ows:DCP/ows:HTTP/ows:Post/@xlink:href"/>
			</xsl:variable>
			<ctl:message>Target endpoint is <xsl:value-of select="$csw.GetRecords.post.url"/></ctl:message>
			<xsl:variable name="recordsNumber">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
						<csw:GetRecords service="CSW" version="2.0.2" resultType="results" maxRecords="0">
						  <csw:Query typeNames="csw:Record">
							<csw:ElementSetName>summary</csw:ElementSetName>
						  </csw:Query>
						</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			<xsl:variable name="nMatches">
				<xsl:value-of select="$recordsNumber//csw:SearchResults/@numberOfRecordsMatched"/>
			</xsl:variable>
			<xsl:if test="xsd:integer($nMatches) lt 11">
				 <ctl:message>
					[FAILURE] Required 11 records in the DB
                 </ctl:message>
                 <ctl:fail/>
			</xsl:if>
			<ctl:message>Number of records <xsl:value-of select="$nMatches"/></ctl:message>
			<xsl:variable name="TestBoundingBoxNumbers">
				<request>
					<url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</url>
                    <method>POST</method>
					<body>
						<csw:GetRecords service="CSW" version="2.0.2" resultType="results" maxRecords="0">
							<csw:Query typeNames="csw:Record">
							  <csw:ElementName>summary</csw:ElementName>
							  <csw:Constraint version="1.1.0">
								<ogc:Filter>
								   <ogc:BBOX>
									 <ogc:PropertyName>ows:BoundingBox</ogc:PropertyName>
									 <gml:Envelope srsName="urn:x-ogc:def:crs:EPSG:6.11:4326">
									   <gml:lowerCorner>-180.0 -90.0</gml:lowerCorner>
									   <gml:upperCorner>180.0 90.0</gml:upperCorner>
									 </gml:Envelope>
								   </ogc:BBOX>
							   </ogc:Filter>
							 </csw:Constraint>
						   </csw:Query>
						</csw:GetRecords>
					</body>
					<p:XMLValidatingParser.CSW/>
				</request>
			</xsl:variable>
			<xsl:variable name="boxMatches">
				<xsl:value-of select="xsd:integer($TestBoundingBoxNumbers//csw:SearchResults/@numberOfRecordsMatched)"/>
			</xsl:variable>
			<xsl:if test="xsd:integer($boxMatches) lt 2">
				 <ctl:message>
					[FAILURE] Required at least 2 records with a Bounding Box (CRS urn:x-ogc:def:crs:EPSG:6.11:4326)
                 </ctl:message>
                 <ctl:fail/>
			</xsl:if>
			<ctl:message>Number of records with bounding box<xsl:value-of select="$boxMatches"/></ctl:message>
			<xsl:variable name="TestSubjectTitles">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</ctl:url>
					<ctl:method>POST</ctl:method>
					<ctl:body>
					<csw:GetRecords service="CSW" version="2.0.2" resultType="results" maxRecords="0">
						  <csw:Query typeNames="csw:Record">
							<csw:ElementName>summary</csw:ElementName>
							<csw:Constraint version="1.1.0">
								<ogc:Filter>
									<ogc:And>
										<ogc:PropertyIsGreaterThan>
											<ogc:PropertyName>dc:subject</ogc:PropertyName>
											<ogc:Literal>' '</ogc:Literal>
										</ogc:PropertyIsGreaterThan>
										<ogc:PropertyIsGreaterThan>
											<ogc:PropertyName>dc:title</ogc:PropertyName>
											<ogc:Literal>' '</ogc:Literal>
										</ogc:PropertyIsGreaterThan>
									</ogc:And>
								</ogc:Filter>
							</csw:Constraint>
						  </csw:Query>
						</csw:GetRecords>
					</ctl:body>
					<p:XMLValidatingParser.CSW/>
				</ctl:request>
			</xsl:variable>
			<xsl:variable name="TitleSubectMatches">
				<xsl:value-of select="xsd:integer($TestSubjectTitles//csw:SearchResults/@numberOfRecordsMatched)"/>
			</xsl:variable>
			<xsl:if test="xsd:integer($TitleSubectMatches) lt 2">
				 <ctl:message>
					[FAILURE] Required at least 2 records with title and subject
                 </ctl:message>
                 <ctl:fail/>
			</xsl:if>
			
			<xsl:variable name="TestDateNumbers">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$csw.GetRecords.post.url"/>
					</ctl:url>
					<ctl:method>POST</ctl:method>
					<ctl:body>
					<csw:GetRecords service="CSW" version="2.0.2" resultType="results" maxRecords="0"> 
						  <csw:Query typeNames="csw:Record">
							<csw:ElementName>summary</csw:ElementName>
							<csw:Constraint version="1.1.0">
								<ogc:Filter>
								   <ogc:PropertyIsGreaterThanOrEqualTo>
									 <ogc:PropertyName>dc:date</ogc:PropertyName>
									 <ogc:Literal>0000-00-00</ogc:Literal>
								   </ogc:PropertyIsGreaterThanOrEqualTo>
								</ogc:Filter>
							</csw:Constraint>
						  </csw:Query>
						</csw:GetRecords>
					</ctl:body>
					<p:XMLValidatingParser.CSW/>
					</ctl:request>
			</xsl:variable>
			<xsl:variable name="DateMatches">
				<xsl:value-of select="xsd:integer($TestDateNumbers//csw:SearchResults/@numberOfRecordsMatched)"/>
			</xsl:variable>
			<xsl:if test="xsd:integer($DateMatches) lt 3">
				 <ctl:message>
					[FAILURE] Required at least 3 records with a date
                 </ctl:message>
                 <ctl:fail/>
			</xsl:if>
		</ctl:code>
	</ctl:test>
</ctl:package>
